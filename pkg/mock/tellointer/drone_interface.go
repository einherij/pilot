// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pkg/tellointer/drone_interface.go

// Package mock_tellointer is a generated GoMock package.
package mock_tellointer

import (
	reflect "reflect"
	time "time"

	tello "github.com/SMerrony/tello"
	gomock "github.com/golang/mock/gomock"
)

// MockDrone is a mock of Drone interface.
type MockDrone struct {
	ctrl     *gomock.Controller
	recorder *MockDroneMockRecorder
}

// MockDroneMockRecorder is the mock recorder for MockDrone.
type MockDroneMockRecorder struct {
	mock *MockDrone
}

// NewMockDrone creates a new mock instance.
func NewMockDrone(ctrl *gomock.Controller) *MockDrone {
	mock := &MockDrone{ctrl: ctrl}
	mock.recorder = &MockDroneMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDrone) EXPECT() *MockDroneMockRecorder {
	return m.recorder
}

// Backward mocks base method.
func (m *MockDrone) Backward(pct int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Backward", pct)
}

// Backward indicates an expected call of Backward.
func (mr *MockDroneMockRecorder) Backward(pct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backward", reflect.TypeOf((*MockDrone)(nil).Backward), pct)
}

// ControlConnectDefault mocks base method.
func (m *MockDrone) ControlConnectDefault() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControlConnectDefault")
	ret0, _ := ret[0].(error)
	return ret0
}

// ControlConnectDefault indicates an expected call of ControlConnectDefault.
func (mr *MockDroneMockRecorder) ControlConnectDefault() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControlConnectDefault", reflect.TypeOf((*MockDrone)(nil).ControlConnectDefault))
}

// ControlDisconnect mocks base method.
func (m *MockDrone) ControlDisconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ControlDisconnect")
}

// ControlDisconnect indicates an expected call of ControlDisconnect.
func (mr *MockDroneMockRecorder) ControlDisconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControlDisconnect", reflect.TypeOf((*MockDrone)(nil).ControlDisconnect))
}

// Down mocks base method.
func (m *MockDrone) Down(pct int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Down", pct)
}

// Down indicates an expected call of Down.
func (mr *MockDroneMockRecorder) Down(pct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Down", reflect.TypeOf((*MockDrone)(nil).Down), pct)
}

// Forward mocks base method.
func (m *MockDrone) Forward(pct int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Forward", pct)
}

// Forward indicates an expected call of Forward.
func (mr *MockDroneMockRecorder) Forward(pct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forward", reflect.TypeOf((*MockDrone)(nil).Forward), pct)
}

// GetVideoSpsPps mocks base method.
func (m *MockDrone) GetVideoSpsPps() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetVideoSpsPps")
}

// GetVideoSpsPps indicates an expected call of GetVideoSpsPps.
func (mr *MockDroneMockRecorder) GetVideoSpsPps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoSpsPps", reflect.TypeOf((*MockDrone)(nil).GetVideoSpsPps))
}

// Hover mocks base method.
func (m *MockDrone) Hover() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Hover")
}

// Hover indicates an expected call of Hover.
func (mr *MockDroneMockRecorder) Hover() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hover", reflect.TypeOf((*MockDrone)(nil).Hover))
}

// Land mocks base method.
func (m *MockDrone) Land() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Land")
}

// Land indicates an expected call of Land.
func (mr *MockDroneMockRecorder) Land() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Land", reflect.TypeOf((*MockDrone)(nil).Land))
}

// Left mocks base method.
func (m *MockDrone) Left(pct int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Left", pct)
}

// Left indicates an expected call of Left.
func (mr *MockDroneMockRecorder) Left(pct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Left", reflect.TypeOf((*MockDrone)(nil).Left), pct)
}

// Right mocks base method.
func (m *MockDrone) Right(pct int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Right", pct)
}

// Right indicates an expected call of Right.
func (mr *MockDroneMockRecorder) Right(pct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Right", reflect.TypeOf((*MockDrone)(nil).Right), pct)
}

// SetVideoWide mocks base method.
func (m *MockDrone) SetVideoWide() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetVideoWide")
}

// SetVideoWide indicates an expected call of SetVideoWide.
func (mr *MockDroneMockRecorder) SetVideoWide() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVideoWide", reflect.TypeOf((*MockDrone)(nil).SetVideoWide))
}

// StreamFlightData mocks base method.
func (m *MockDrone) StreamFlightData(asAvailable bool, periodMs time.Duration) (<-chan tello.FlightData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamFlightData", asAvailable, periodMs)
	ret0, _ := ret[0].(<-chan tello.FlightData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamFlightData indicates an expected call of StreamFlightData.
func (mr *MockDroneMockRecorder) StreamFlightData(asAvailable, periodMs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamFlightData", reflect.TypeOf((*MockDrone)(nil).StreamFlightData), asAvailable, periodMs)
}

// TakeOff mocks base method.
func (m *MockDrone) TakeOff() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TakeOff")
}

// TakeOff indicates an expected call of TakeOff.
func (mr *MockDroneMockRecorder) TakeOff() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeOff", reflect.TypeOf((*MockDrone)(nil).TakeOff))
}

// TurnLeft mocks base method.
func (m *MockDrone) TurnLeft(pct int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TurnLeft", pct)
}

// TurnLeft indicates an expected call of TurnLeft.
func (mr *MockDroneMockRecorder) TurnLeft(pct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TurnLeft", reflect.TypeOf((*MockDrone)(nil).TurnLeft), pct)
}

// TurnRight mocks base method.
func (m *MockDrone) TurnRight(pct int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TurnRight", pct)
}

// TurnRight indicates an expected call of TurnRight.
func (mr *MockDroneMockRecorder) TurnRight(pct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TurnRight", reflect.TypeOf((*MockDrone)(nil).TurnRight), pct)
}

// Up mocks base method.
func (m *MockDrone) Up(pct int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Up", pct)
}

// Up indicates an expected call of Up.
func (mr *MockDroneMockRecorder) Up(pct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Up", reflect.TypeOf((*MockDrone)(nil).Up), pct)
}

// VideoConnectDefault mocks base method.
func (m *MockDrone) VideoConnectDefault() (<-chan []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VideoConnectDefault")
	ret0, _ := ret[0].(<-chan []byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VideoConnectDefault indicates an expected call of VideoConnectDefault.
func (mr *MockDroneMockRecorder) VideoConnectDefault() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VideoConnectDefault", reflect.TypeOf((*MockDrone)(nil).VideoConnectDefault))
}

// VideoDisconnect mocks base method.
func (m *MockDrone) VideoDisconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VideoDisconnect")
}

// VideoDisconnect indicates an expected call of VideoDisconnect.
func (mr *MockDroneMockRecorder) VideoDisconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VideoDisconnect", reflect.TypeOf((*MockDrone)(nil).VideoDisconnect))
}
